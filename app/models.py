from sqlalchemy import Column, Integer, Float, DateTime, String
from sqlalchemy.orm import declarative_base
from datetime import datetime

Base = declarative_base()

class Measurement(Base):
    __tablename__ = "measurements"
    id = Column(Integer, primary_key=True, index=True)
    timestamp = Column(DateTime, index=True)   # UTC
    # Instantaneous power (W)
    power_consumption_w = Column(Float, default=0.0)   # grid import (main)
    power_generation_w  = Column(Float, default=0.0)   # solar
    power_battery_w     = Column(Float, default=0.0)   # battery
    total_consumption_w = Column(Float, default=0.0)   # home total consumption
    # Energy integrals for the interval preceding this timestamp (Wh)
    energy_consumed_wh   = Column(Float, default=0.0)  # purchased from grid (Wh)
    energy_generated_wh  = Column(Float, default=0.0)  # generated by solar (Wh)
    energy_exported_wh   = Column(Float, default=0.0)  # exported to grid (Wh)
    # Prices (â‚¬/kWh)
    price_buy_eur_per_kwh  = Column(Float, nullable=True)
    price_sell_eur_per_kwh = Column(Float, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class PriceHour(Base):
    __tablename__ = "prices"
    hour_utc = Column(DateTime, primary_key=True, index=True)
    price_buy_eur_per_kwh = Column(Float, nullable=True)
    price_sell_eur_per_kwh = Column(Float, nullable=True)
    source = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)